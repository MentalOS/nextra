using System;
using System.IO;
using System.Text;
using System.Web;

namespace NExtra.Web.Html
{
    /// <summary>
    /// This filter can be used to automatically convert all HTML5
    /// elements withinin the client response to HTML4 elements if
    /// the current browser does not support HTML5 elements.
    /// </summary>
    /// <remarks>
    /// Author:     Daniel Saidi [daniel.saidi@gmail.com]
    /// Link:       http://www.saidi.se/nextra
    /// 
    /// To use the filter, apply it to the current response filter
    /// in global.asax, or use the Html5ElementConvertHttpModule.
    /// 
    /// This filter will ONLY convert HTML5 elements if the output
    /// is generated by a Page or an MvcHandler.
    /// </remarks>
    public class Html5ElementConvertFilter : Stream
    {
        private readonly Stream baseStream;
        private readonly StringBuilder html;
        private readonly IHtml5ElementSupportEvaluator html5ElementSupportEvaluator;
        private readonly IHtmlConverter htmlConverter;
        private bool isFlushed;


        /// <summary>
        /// Create an instance of the class.
        /// </summary>
        public Html5ElementConvertFilter(Stream baseStream)
            : this(baseStream, new Html5ElementSupportEvaluator(), new Html5ElementConverter())
        { }

        /// <summary>
        /// Create an instance of the class that uses custom
        /// implementations of ICanDetermineHtml5Support and
        /// ICanConvertHtml5Elements.
        /// </summary>
        public Html5ElementConvertFilter(Stream baseStream, IHtml5ElementSupportEvaluator html5ElementSupportEvaluator, IHtmlConverter htmlConverter)
        {
            this.baseStream = baseStream;
            html = new StringBuilder();
            this.html5ElementSupportEvaluator = html5ElementSupportEvaluator;
            this.htmlConverter = htmlConverter;
        }


        /// <summary>
        /// Whether or not to convert HTML5 elements.
        /// </summary>
        private bool ConversionEnabled
        {
            get
            {
                //var isPage = (HttpContext.Current.Handler as Page) != null;
                //var isMvc = (HttpContext.Current.Handler as MvcHandler) != null;
                var isHtml = HttpContext.Current.Response.ContentType == "text/html";
                var hasHtml5Support = html5ElementSupportEvaluator.HasHtml5ElementSupport(HttpContext.Current);

                return /*(isPage || isMvc) && */isHtml && !hasHtml5Support;
            }
        }


        /// <summary>
        /// Flush the generated output. This will write the
        /// resulting HTML to the base stream then flush it.
        /// </summary>
        public override void Flush()
        {
            if (!ConversionEnabled || isFlushed)
                return;

            using (var writer = new StreamWriter(baseStream))
            {
                writer.Write(htmlConverter.ConvertHtml(html.ToString()));
            }

            baseStream.Flush();
            isFlushed = true;
        }

        /// <summary>
        /// Write buffer to the temp HTML string.  
        /// </summary>
        public override void Write(byte[] buffer, int offset, int count)
        {
            if (!ConversionEnabled)
            {
                baseStream.Write(buffer, offset, count);
                return;
            }

            html.Append(HttpContext.Current.Response.ContentEncoding.GetString(buffer, offset, count));
        }


        /// <summary>
        /// Always returns false.
        /// </summary>
        public override bool CanRead { get { return false; } }

        /// <summary>
        /// Always returns false.
        /// </summary>
        public override bool CanSeek { get { return false; } }

        /// <summary>
        /// Always returns true.
        /// </summary>
        public override bool CanWrite { get { return true; } }

        /// <summary>
        /// Not implemented.
        /// </summary>
        public override long Length { get { throw new NotImplementedException(); } }

        /// <summary>
        /// Not implemented.
        /// </summary>
        public override long Position { get { throw new NotImplementedException(); } set { throw new NotImplementedException(); } }

        /// <summary>
        /// Not implemented.
        /// </summary>
        public override int Read(byte[] buffer, int offset, int count) { throw new NotImplementedException(); }

        /// <summary>
        /// Not implemented.
        /// </summary>
        public override long Seek(long offset, SeekOrigin origin) { throw new NotImplementedException(); }

        /// <summary>
        /// Not implemented.
        /// </summary>
        public override void SetLength(long value) { throw new NotImplementedException(); }
    }
}
